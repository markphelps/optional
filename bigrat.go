// Code generated by go generate
// This file was generated by robots at 2021-07-21 09:24:44.132530824 +0000 UTC

package optional

import (
	"math/big"
	"errors"
)

// BigRat is an optional big.Rat.
type BigRat struct {
	value *big.Rat
}

// NewBigRat creates an optional.BigRat from a big.Rat.
func NewBigRat(v big.Rat) BigRat {
	return BigRat{&v}
}

// Set sets the big.Rat value.
func (b *BigRat) Set(v big.Rat) {
	b.value = &v
}

// Get returns the big.Rat value or an error if not present.
func (b BigRat) Get() (big.Rat, error) {
	if !b.Present() {
		var zero big.Rat
		return zero, errors.New("value not present")
	}
	return *b.value, nil
}

// MustGet returns the big.Rat value or panics if not present.
func (b BigRat) MustGet() big.Rat {
	if !b.Present() {
		panic("value not present")
	}
	return *b.value
}

// Present returns whether or not the value is present.
func (b BigRat) Present() bool {
	return b.value != nil
}

// OrElse returns the big.Rat value or a default value if the value is not present.
func (b BigRat) OrElse(v big.Rat) big.Rat {
	if b.Present() {
		return *b.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (b BigRat) If(fn func(big.Rat)) {
	if b.Present() {
		fn(*b.value)
	}
}
