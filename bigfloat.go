// Code generated by go generate
// This file was generated by robots at 2021-07-21 09:24:44.328540277 +0000 UTC

package optional

import (
	"math/big"
	"errors"
)

// BigFloat is an optional big.Float.
type BigFloat struct {
	value *big.Float
}

// NewBigFloat creates an optional.BigFloat from a big.Float.
func NewBigFloat(v big.Float) BigFloat {
	return BigFloat{&v}
}

// Set sets the big.Float value.
func (b *BigFloat) Set(v big.Float) {
	b.value = &v
}

// Get returns the big.Float value or an error if not present.
func (b BigFloat) Get() (big.Float, error) {
	if !b.Present() {
		var zero big.Float
		return zero, errors.New("value not present")
	}
	return *b.value, nil
}

// MustGet returns the big.Float value or panics if not present.
func (b BigFloat) MustGet() big.Float {
	if !b.Present() {
		panic("value not present")
	}
	return *b.value
}

// Present returns whether or not the value is present.
func (b BigFloat) Present() bool {
	return b.value != nil
}

// OrElse returns the big.Float value or a default value if the value is not present.
func (b BigFloat) OrElse(v big.Float) big.Float {
	if b.Present() {
		return *b.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (b BigFloat) If(fn func(big.Float)) {
	if b.Present() {
		fn(*b.value)
	}
}
