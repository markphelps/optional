// Code generated by go generate
// This file was generated by robots at 2021-05-04 14:21:54.698931 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Float64 is an optional float64.
type Float64 struct {
	value *float64
}

// NewFloat64 creates an optional.Float64 from a float64.
func NewFloat64(v float64) Float64 {
	return Float64{&v}
}

// Set sets the float64 value.
func (f *Float64) Set(v float64) {
	f.value = &v
}

// Get returns the float64 value or an error if not present.
func (f Float64) Get() (float64, error) {
	if !f.Present() {
		var zero float64
		return zero, errors.New("value not present")
	}
	return *f.value, nil
}

// MustGet returns the float64 value or panics if not present.
func (f Float64) MustGet() float64 {
	if !f.Present() {
		panic("value not present")
	}
	return *f.value
}

// Present returns whether or not the value is present.
func (f Float64) Present() bool {
	return f.value != nil
}

// OrElse returns the float64 value or a default value if the value is not present.
func (f Float64) OrElse(v float64) float64 {
	if f.Present() {
		return *f.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (f Float64) If(fn func(float64)) {
	if f.Present() {
		fn(*f.value)
	}
}

func (f Float64) MarshalJSON() ([]byte, error) {
	if f.Present() {
		return json.Marshal(f.value)
	}
	return json.Marshal(nil)
}

func (f *Float64) UnmarshalJSON(data []byte) error {

	if string(data) == "null" {
		f.value = nil
		return nil
	}

	var value float64

	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	f.value = &value
	return nil
}
